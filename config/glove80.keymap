#include <behaviors.dtsi>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/outputs.h>

#define BASE 0
#define LOWER 1
#define MAGIC 2
#define QWERTY 3
#define GAMING 4

/ {
    /* Glove80 system behavior & macros */
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to
        lower: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo 1>, <&to 1>;
        };

        td_brackets: tap_dance_brackets {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_BRACKETS";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mt &m_brackets RIGHT_BRACKET>, <&kp LEFT_BRACKET>;
        };

        td_braces: tap_dance_braces {
                    compatible = "zmk,behavior-tap-dance";
                    label = "TAP_DANCE_BRACES";
                    #binding-cells = <0>;
                    tapping-term-ms = <200>;
                    bindings = <&mt &m_braces RIGHT_BRACE>, <&kp LEFT_BRACE>;
                };
    };
};
]

/ {
    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };

        m_brackets: brackets_macro {
                    label = "BRACKETS";
                    compatible = "zmk,behavior-macro";
                    #binding-cells = <0>;
                    bindings
                        = <&macro_tap &kp LEFT_BRACKET &kp RIGHT_BRACKET>;
                };

        m_braces: braces_macro {
                    label = "BRACES";
                    compatible = "zmk,behavior-macro";
                    #binding-cells = <0>;
                    bindings
                        = <&macro_tap &kp LEFT_BRACE &kp RIGHT_BRACE>;
                };
    };
};

/ {
    magic: magic_hold_tap {
        compatible = "zmk,behavior-hold-tap";
        label = "MAGIC_HOLD_TAP";
        #binding-cells = <2>;
        flavor = "tap-preferred";
        tapping-term-ms = <200>;
        bindings = <&mo>, <&rgb_ug_status_macro>;
    };
};

/ {
    keymap {
        compatible = "zmk,keymap";

        layer_Base {
            bindings = <
     &kp F1  &kp F2    &kp F3    &kp F4     &kp F5                                                                                 &kp F6     &kp F7    &kp F8    &kp F9    &kp F10
  &kp EQUAL  &kp N1    &kp N2    &kp N3     &kp N4  &kp N5                                                                 &kp N6  &kp N7     &kp N8    &kp N9    &kp N0  &kp MINUS
    &kp TAB   &kp Q     &kp W     &kp F      &kp P   &kp G                                                                  &kp J   &kp L      &kp U     &kp Y  &kp SEMI   &kp BSLH
    &kp ESC   &kp A     &kp R     &kp S      &kp T   &kp D                                                                  &kp H   &kp N      &kp E     &kp I     &kp O    &kp SQT
  &kp GRAVE   &kp Z     &kp X     &kp C      &kp V   &kp B  &sk LSHFT  &td_brackets   &kp LALT   &kp RALT  &kp DEL  &sk RSHFT   &kp K   &kp M  &kp COMMA   &kp DOT  &kp FSLH    &kp F11
  &magic 2 0  &lower  &td_braces  &kp LEFT  &kp RIGHT           &kp BSPC  &kp LGUI  &kp LCTRL  &kp RCTRL  &kp RET  &kp SPACE          &kp UP   &kp DOWN  &kp LBKT  &kp RBKT    &kp F12 >;
        };

        layer_Lower {
            bindings = <
 &kp C_BRI_DN  &kp C_BRI_UP      &kp C_PREV      &kp C_NEXT         &kp C_PP                                                                                    &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP            &none  &kp PAUSE_BREAK
       &trans         &none           &none           &none            &none   &kp HOME                                                   &kp LEFT_PARENTHESIS  &kp KP_NUM  &kp KP_EQUAL  &kp KP_SLASH  &kp KP_MULTIPLY  &kp PRINTSCREEN
     &kp CAPS         &none           &none    &kp UP_ARROW            &none    &kp END                                                  &kp RIGHT_PARENTHESIS   &kp KP_N7     &kp KP_N8     &kp KP_N9     &kp KP_MINUS   &kp SCROLLLOCK
       &trans         &none  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp PG_UP                                                            &kp PERCENT   &kp KP_N4     &kp KP_N5     &kp KP_N6      &kp KP_PLUS            &none
       &trans     &kp K_APP           &none         &kp F11          &kp F12  &kp PG_DN  &trans  &trans  &trans  &trans  &trans  &trans              &kp COMMA   &kp KP_N1     &kp KP_N2     &kp KP_N3     &kp KP_ENTER           &trans
   &magic 2 0         &to BASE        &kp INS       &kp F11          &kp F12             &trans  &trans  &to QWERTY &to GAMING  &trans  &trans                          &kp KP_N0     &kp KP_N0    &kp KP_DOT     &kp KP_ENTER           &trans
            >;
        };

        layer_Magic {
            bindings = <
  &bt BT_CLR            &none            &none            &none            &none                                                                                  &none   &none   &none   &none  &bt BT_CLR_ALL
       &none            &none            &none            &none            &none            &none                                                         &none   &none   &none   &none   &none           &none
       &none  &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                         &none   &none   &none   &none   &none           &none
 &bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                         &none   &none   &none   &none   &none     &bootloader
      &reset            &none            &none            &none            &none            &none   &bt_2   &bt_3         &none   &none   &none   &none   &none   &none   &none   &none   &none          &reset
       &none            &none            &none            &none            &none                    &bt_0   &bt_1  &out OUT_USB   &none   &none   &none           &none   &none   &none   &none           &none
            >;
        };

        layer_QWERTY {
            bindings = <
     &kp F1  &kp F2   &kp F3    &kp F4     &kp F5                                                                  &kp F6     &kp F7    &kp F8    &kp F9    &kp F10
  &kp EQUAL  &kp N1   &kp N2    &kp N3     &kp N4  &kp N5                                                  &kp N6  &kp N7     &kp N8    &kp N9    &kp N0  &kp MINUS
    &kp TAB   &kp Q    &kp W     &kp E      &kp R   &kp T                                                   &kp Y   &kp U      &kp I     &kp O     &kp P   &kp BSLH
    &kp ESC   &kp A    &kp S     &kp D      &kp F   &kp G                                                   &kp H   &kp J      &kp K     &kp L  &kp SEMI    &kp SQT
  &kp GRAVE   &kp Z    &kp X     &kp C      &kp V   &kp B  &trans  &trans  &trans  &trans  &trans  &trans   &kp N   &kp M  &kp COMMA   &kp DOT  &kp FSLH  &kp PG_UP
 &magic 2 0   &to BASE  &kp END  &kp LEFT  &kp RIGHT          &trans  &trans  &trans  &trans  &trans  &trans          &kp UP   &kp DOWN  &kp LBKT  &kp RBKT  &kp PG_DN
            >;
        };

        layer_Gaming {
            bindings = <
     &kp F1     &kp F2   &kp F3  &kp F4  &kp F5                                                                          &trans  &trans  &trans  &trans  &trans
  &kp EQUAL     &kp N1   &kp N2  &kp N3  &kp N4  &kp N5                                                          &trans  &trans  &trans  &trans  &trans  &trans
    &kp TAB      &kp G    &kp Q   &kp W   &kp E   &kp R                                                          &trans  &trans  &trans  &trans  &trans  &trans
    &kp ESC  &kp LSHFT    &kp A   &kp S   &kp D   &kp F                                                          &trans  &trans  &trans  &trans  &trans  &trans
  &kp LSHFT      &kp Z    &kp X   &kp C   &kp V   &kp B  &kp LCTRL  &kp LALT      &to BASE  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
 &magic 2 0   &kp HOME  &kp END   &kp O   &kp J              &kp M     &kp N  &kp SPACE  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };

    };
};
